generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  password         String
  image            String?
  role             Role        @default(USER)
  files            File[]
  sharedFiles      FileShare[]
  active           Boolean     @default(true)
  resetToken       Int?
  resetTokenExpire DateTime?
  subscribedAt     DateTime    @default(now())
  validDays        Int         @default(7)
  totalStorage     Int         @default(10)
  uploadSpeed      Float       @default(10)
  downloadSpeed    Float       @default(10)
  folderShares     FolderShare[] 

  payments Payment[]
  folders  Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id         String      @id @default(uuid())
  name       String
  size       Int
  type       String
  path       String
  userId     String
  random     String?    @unique
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  visibility Visibility  @default(PRIVATE)
  private    Boolean
  trash      Trash[]
  fileShares FileShare[]

  totalDownloads   Int   @default(0)
  totalViews       Int   @default(0)
  downloadsByUsers Json?

  viewsByUsers Json?

  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trash {
  id        String   @id @default(uuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  deletedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileShare {
  id        String   @id @default(uuid())
  fileId    String
  userId    String
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedAt  DateTime @default(now())
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fileId, email])
}

model FolderShare {
  id        String   @id @default(uuid())
  folderId  String
  userId    String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedAt  DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([folderId, userId])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  paymentDate   DateTime @default(now())
  paymentMethod String
  status        String?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pricing {
  id                String   @id @default(uuid())
  perGbStoragePrice Float    @default(0.1)
  perDayPrice       Float    @default(0.05)
  perMbpsSpeedPrice Float    @default(0.02)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model GuestFile {
  id         String     @id @default(uuid())
  name       String
  size       Int
  type       String
  path       String
  visibility Visibility @default(PUBLIC)
  fileUrl    String     @unique
  random     String?    @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Folder {
  id       String   @id @default(uuid())
  name     String
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Folder?  @relation("FolderParent", fields: [parentId], references: [id])
  children Folder[] @relation("FolderParent")
  sharedUsers FolderShare[]
  visibility Visibility @default(PRIVATE)

  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  PUBLIC
  PRIVATE
  SHARED
}

enum Role {
  ADMIN
  USER
}
